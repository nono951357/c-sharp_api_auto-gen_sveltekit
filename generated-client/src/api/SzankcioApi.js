/**
 * MLSZ_API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Szankcio from '../model/Szankcio';

/**
* Szankcio service.
* @module api/SzankcioApi
* @version v1.2
*/
export default class SzankcioApi {

    /**
    * Constructs a new SzankcioApi. 
    * @alias module:api/SzankcioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the szankcioGet operation.
     * @callback module:api/SzankcioApi~szankcioGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Szankcio>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/SzankcioApi~szankcioGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Szankcio>}
     */
    szankcioGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [Szankcio];
      return this.apiClient.callApi(
        '/Szankcio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the szankcioIdDelete operation.
     * @callback module:api/SzankcioApi~szankcioIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SzankcioApi~szankcioIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    szankcioIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling szankcioIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Szankcio/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the szankcioIdGet operation.
     * @callback module:api/SzankcioApi~szankcioIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Szankcio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {module:api/SzankcioApi~szankcioIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Szankcio}
     */
    szankcioIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling szankcioIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Szankcio;
      return this.apiClient.callApi(
        '/Szankcio/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the szankcioIdPut operation.
     * @callback module:api/SzankcioApi~szankcioIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/Szankcio} [szankcio] 
     * @param {module:api/SzankcioApi~szankcioIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    szankcioIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['szankcio'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling szankcioIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Szankcio/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the szankcioPost operation.
     * @callback module:api/SzankcioApi~szankcioPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Szankcio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/Szankcio} [szankcio] 
     * @param {module:api/SzankcioApi~szankcioPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Szankcio}
     */
    szankcioPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['szankcio'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Szankcio;
      return this.apiClient.callApi(
        '/Szankcio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
